name: 构建并部署请求捕获服务器

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4

      # 设置Node.js环境
      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # 安装依赖
      - name: 安装依赖
        run: npm ci

      # 添加Lint检查（如果需要可以取消注释）
      # - name: 运行Lint检查
      #   run: npm run lint

      # 添加测试（如果有测试可以取消注释）
      # - name: 运行测试
      #   run: npm test

      # 设置Docker Buildx
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 登录到DockerHub
      - name: 登录到DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 提取元数据（用于标记Docker镜像）
      - name: 提取Docker元数据
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/quantumult-proxy
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch
            type=sha,format=short

      # 构建并推送Docker镜像
      - name: 构建并推送
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 部署到Railway（如果使用Railway平台）
      - name: 部署到Railway
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE }}

  # GitHub Pages部署任务（用于展示API文档或界面）
  deploy-docs:
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      # 这里假设你有一个文档生成命令
      # - name: 生成文档
      #   run: npm run docs

      # 部署到GitHub Pages
      - name: 部署到GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs  # 修改为你的文档目录
          publish_branch: gh-pages  # GitHub Pages分支 